package MacySchedule;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

/**
 * This is a class to read the data of Macy's schedule page to generate a schedule object
 * with employees with individual schedules.
 *
 * The schedule was designed to read the "My Area View.html" page of a regular part-time
 * employee and may not work with other pages. However, there is nothing that prevents
 * files of different names to be inputted to the reader as the webpage may change names
 * in the future, although it may cause exceptions.
 *
 * @author Lisa Chen
 * @since 24Nov18
 * @version 1
 */
public class SchedulePageReader
{
    private File schedulePage;
    private static WeekSchedule weekSchedule;
    private Scanner fileScanner;
    private final String WEEK_OF_LABEL = "Week Of:";
    private final String WEEK_OF_SELECTED_LABEL = "selected";
    private final int DATE_RANGE_LENGTH = 23; //length of: XX/XX/XXXX - XX/XX/XXXX
    private final String DEPT_NUM_PRELINE = "ScheduledAreas"; //one line before
    private final String EMPLOYEE_PRETEXT = "td class=\"myareaviewtblcellassoc\">";
    private final String CELL_TITLE_PRETEXT = "<td title=\"";
    private final String END_CELL_TEXT = "</td>";
    private final String END_HOURS_TEXT = "<br>";
    private final String HTML_SPACING = "&nbsp;";

    /**
     * Constructs the reader with a given html file to read.
     * @param htmlFile The html file to read the data from
     * @throws FileNotFoundException If the file cannot be found
     */
    public SchedulePageReader(File htmlFile) throws FileNotFoundException
    {
        schedulePage = htmlFile;
        fileScanner = new Scanner(schedulePage);
        String weekRange = findWeekRange();
        String[] departmentInfo = getDepartmentInfo();
        weekSchedule = new WeekSchedule(weekRange, departmentInfo[0],
                Integer.parseInt(departmentInfo[1]));
        employeeSetUp();
    }

    /**
     * Finds the information of the range of dates for the week being displayed on the
     * html page.
     * @return The range of dates for the displayed week
     */
    private String findWeekRange()
    {
        boolean found = false;
        String weekRange = "";
        //loop to look for selected week of date
        while (fileScanner.hasNext() && found == false)
        {
            weekRange = fileScanner.nextLine();
            if (weekRange.contains(WEEK_OF_LABEL))
            {
                found = true;
                weekRange = fileScanner.nextLine();
                if (!weekRange.contains(WEEK_OF_SELECTED_LABEL))
                    weekRange = fileScanner.nextLine();
            }
        }
        //first index is after the first > in the line
        int indexStart = weekRange.indexOf('>') + 1;
        weekRange = weekRange.substring(indexStart, indexStart +
                DATE_RANGE_LENGTH);
        return weekRange;
    }

    /**
     * Retives the week schedule generated by the reader.
     * @return The week schedule object with employees associated with the schedule
     */
    public WeekSchedule getWeekSchedule() { return weekSchedule; }

    /**
     * Retrives the information in regards to the department being focused upon on the
     * html page. The information retrieved is the department name and the reference
     * number for the department (as a string, not a number) in a string array.
     * @return The department information in format {department name, department number}
     */
    private String[] getDepartmentInfo()
    {
        boolean found = false;
        String deptStr = "";
        String[] result = new String[2];

        while (fileScanner.hasNext() && found == false)
        {
            deptStr = fileScanner.nextLine();
            //if contains pretext, the department is in the next line between > <
            if(deptStr.contains(DEPT_NUM_PRELINE))
            {
                found = true;
                deptStr = fileScanner.nextLine();
                deptStr = deptStr.substring(deptStr.indexOf('>') + 1,
                        deptStr.indexOf('<', deptStr.indexOf('<') + 1));
                //deptStr has " - " separating the departnment number and description
                result[0] = deptStr.substring(deptStr.indexOf('-') + 2);
                result[1] = deptStr.substring(0, deptStr.indexOf('-') - 1);
            }
        }
        return result;
    }

    /**
     * Creates the employees from the information in the html page and adds them to
     * the week schedule that is being generated by the reader.
     */
    private void employeeSetUp()
    {
        while (fileScanner.hasNext())
        {
            String employeeLine = fileScanner.nextLine();
            int startIndex = employeeLine.indexOf(EMPLOYEE_PRETEXT);
            if (startIndex != -1)
            {
                String fullName = employeeLine.substring(startIndex +
                        EMPLOYEE_PRETEXT.length(),employeeLine.indexOf('<',
                        employeeLine.indexOf('<') + 1));
                String[] parsedName = parseFullName(fullName);
                Employee employee = new Employee(parsedName[0], parsedName[1],
                        parsedName[2]);
                employeeLine = employeeLine.substring(employeeLine.indexOf(END_CELL_TEXT)
                        + END_CELL_TEXT.length());
                weekSchedule.addEmployee(populateEmployeeSchedule(employeeLine,
                        employee));
            }
        }
    }

    /**
     * Adds the schedules that is specific to the employee from the information in the
     * html page.
     * @param employeeLine The given line related to the employee from the html page
     * @param employee The employee object to receive the schedules
     * @return The employee object with the populated schedules
     */
    private Employee populateEmployeeSchedule(String employeeLine, Employee employee)
    {
        while(employeeLine.length() > 0)
        {
            if (employeeLine.indexOf(CELL_TITLE_PRETEXT) == 0)
            {
                employeeLine = employeeLine.substring(CELL_TITLE_PRETEXT.length());
                String department = employeeLine.substring(0, employeeLine.indexOf('"'));
                String hours = employeeLine.substring(employeeLine.indexOf('>') + 1,
                        employeeLine.indexOf(END_HOURS_TEXT));
                int indexEndText = employeeLine.indexOf(END_HOURS_TEXT); //
                int deptNum = Integer.parseInt(employeeLine.substring(indexEndText +
                                END_HOURS_TEXT.length(), employeeLine.indexOf(
                                END_HOURS_TEXT, indexEndText + 1)));
                employee.addSeqSchedule(department, deptNum, hours);
            }
            else
            {
                employeeLine = employeeLine.substring(employeeLine.indexOf('>') + 1);
                String cellText = employeeLine.substring(0, employeeLine.indexOf('<'));
                if (cellText.equals(HTML_SPACING))
                    employee.addSeqSchedule("");
                else
                    employee.addSeqSchedule(cellText);
            }
            employeeLine = employeeLine.substring(employeeLine.indexOf(END_CELL_TEXT) +
                    END_CELL_TEXT.length());
        }
        return employee;
    }

    /**
     * Breaks down the employee's full name to first name, last name, and middle name.
     * @param fullName The full name of an employee
     * @return The first name, last name, and middle name in an array, in that order
     */
    private String[] parseFullName(String fullName)
    {
        String[] parsedName = new String[3];
        int commaIndex = fullName.indexOf(',');
        parsedName[1] = fullName.substring(0, commaIndex);
        fullName = fullName.substring(commaIndex + 2); //remove space after comma as well
        int spaceIndex = fullName.indexOf(' ');
        //has a middle name
        if (spaceIndex != -1)
        {
            parsedName[0] = fullName.substring(0, spaceIndex);
            parsedName[2] = fullName.substring(spaceIndex + 1);
        }
        else
        {
            parsedName[0] = fullName;
            parsedName[2] = "";
        }
        return parsedName;
    }
}